% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/agent.R
\name{setTask}
\alias{setTask}
\title{Set an agent's task}
\usage{
setTask(x, task, agent_type = "agent")
}
\arguments{
\item{x}{An agent or a population of agents}

\item{task}{A function to be executed in each time step. You must pass \code{agent} and \code{population} as arguments to the function (see example below)}

\item{agent_type}{If x is a population, which agent type(s) in the population should run this task?}
}
\value{
agent or population
}
\description{
Set the task for a single agent, or for a set of agents within a population,
which will be executed for each time step when the simulation is run. The function you define
must take the arguments \code{agent} and \code{population} and must return \code{agent}
}
\examples{
#Build an example simulation in which each agent moves and then prints its coordinates to the console in each time step

#A parameter table to define 3 agents placed at random coordinates
init_pop <- tibble::tibble(
  id = c(1:3),
  type = "agent",
  location_x = runif(3, 0, 1),
  location_y = runif(3, 0, 1)
  )

#Define the task function, which will be run by an agent in each time step.
#You must pass 'agent' and 'population' as arguments to the function and must
#return 'agent' so that the agent can see itself and other agents when it
#runs its task and so that it will update in the next time step.
move_and_report <- function(agent, population){

  #Move the agent
  agent$location_y <- agent$location_y + runif(1, -0.5, 0.5)
  agent$location_x <- agent$location_x + runif(1, -0.5, 0.5)

  #Print the agent's position to the console
  print(
    paste0("Agent '", agent$id, "' position: ",
    agent$location_y, ", ", agent$location_x)
  )

  agent
}

#Create agents and assign tasks
agents_with_tasks <- makePopulation(init_pop) \%>\%
  setTask(move_and_report)
}
